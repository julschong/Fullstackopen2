{"version":3,"sources":["services/blogService.js","components/ToggleButton.js","components/BlogItem.js","components/Bloglist.js","components/Notification.js","utils/appStates.js","components/LoginForm.js","components/CreateNewBlog.js","components/RegisterUserForm.js","services/loginService.js","services/registerUserService.js","components/UserInterface.js","App.js","index.js"],"names":["base_Url","blogService","getAll","a","axios","get","res","data","createOne","blog","token","auth","headers","Authorization","post","deleteOne","delete","id","updateOne","put","ToggleButton","React","forwardRef","prop","ref","defaultProps","appState","useState","visibility","setVisibility","userLoggedIn","hideWhenVisible","showWhenVisible","toggle","vis","useImperativeHandle","className","style","display","Button","variant","onClick","children","displayName","BlogItem","userFile","deleteButtonClicked","likeButtonClicked","date","Date","createdAt","formattedDate","getFullYear","getMonth","getDate","getHours","getMinutes","deleteButtonVisible","user","username","Card","Body","Title","title","Text","content","url","likes","name","author","Bloglist","blogs","setBlogs","sortedblogs","sort","b","e","blogId","target","find","window","confirm","filter","console","log","concat","map","Notification","text","color","borderColor","LOGGED_IN","NOT_LOGGED_IN","REGISTERING","LoginForm","setUsername","setPassword","submitButtonClicked","Form","onSubmit","Label","Control","type","placeholder","onChange","event","value","CreateNewBlog","setNewTitle","setNewAuthor","setNewURL","setNewContent","defaultValue","as","row","maxLength","RegisterUserForm","setFullName","loginService","login","cred","registerUserService","registerUser","registration","UserInterface","displayNotificationMessage","setUserFile","setAppState","newTitle","newAuthor","newURL","newContent","blogFromRef","useRef","password","fullname","preventDefault","submitter","nativeEvent","userInfo","newBlog","userForRegister","credential","localStorage","setItem","JSON","stringify","current","message","response","error","reset","removeItem","displayUserInterface","isEmpty","object","App","notificationMessage","setNotificationMessage","useEffect","loggedUserJSON","getItem","parse","then","Tabs","defaultActiveKey","Tab","eventKey","duration","clearTimeout","timeout","timeOutNumber","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a14a9525.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst base_Url = '/api/blogs'\r\n\r\nconst getAll = async () => {\r\n    const res = await axios.get(base_Url)\r\n    return res.data\r\n}\r\n\r\nconst createOne = async (blog, token) => {\r\n    const auth = { headers: { Authorization: 'bearer ' + token } }\r\n    const res = await axios.post(base_Url, blog, auth)\r\n    return res.data\r\n}\r\n\r\nconst deleteOne = async function (blog, token) {\r\n    const auth = { headers: { Authorization: 'bearer ' + token } }\r\n    const res = await axios.delete(`${base_Url}/${blog.id}`, auth)\r\n    return res.data\r\n}\r\n\r\nconst updateOne = async (blog) => {\r\n    const res = await axios.put(`${base_Url}/${blog.id}`, blog)\r\n    return res.data\r\n}\r\n\r\n\r\nconst blogService = { getAll, createOne, deleteOne, updateOne }\r\n\r\nexport default blogService","import React, { useState, useImperativeHandle } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './ToggleButton.css'\r\n\r\nconst ToggleButton = React.forwardRef((prop, ref) => {\r\n    ToggleButton.defaultProps = { appState: 'LOGGED_IN' }\r\n\r\n    const [visibility, setVisibility] = useState(true)\r\n\r\n    const userLoggedIn = prop.appState === 'LOGGED_IN'\r\n    const hideWhenVisible = visibility === true ? 'none' : ''\r\n    const showWhenVisible = visibility === true ? '' : 'none'\r\n\r\n    const toggle = (vis) => {\r\n        setVisibility(vis)\r\n    }\r\n\r\n    useImperativeHandle(ref, () => ({ toggle }))\r\n\r\n    return (\r\n        <div>\r\n            <>\r\n                <div className={prop.className} style={{ display: showWhenVisible }}>\r\n                    {userLoggedIn\r\n                        ? <Button className=\"hide\" variant=\"outline-primary\" onClick={() => setVisibility(!visibility)}>hide</Button>\r\n                        : null}\r\n\r\n                    <div className=\"toggled\">\r\n                        {prop.children}\r\n                    </div>\r\n                </div>\r\n                <div className={prop.className} style={{ display: hideWhenVisible }}>\r\n                    {userLoggedIn\r\n                        ? <Button className=\"show\" variant=\"outline-primary\" onClick={() => setVisibility(!visibility)}>show</Button>\r\n                        : null}\r\n                </div>\r\n            </>\r\n        </div>\r\n    )\r\n})\r\n\r\nToggleButton.displayName = 'ToggleButton'\r\n\r\nexport default ToggleButton\r\n","import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ToggleButton from './ToggleButton'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './BlogItem.css'\r\n\r\nconst BlogItem = ({ blog, userFile, deleteButtonClicked, likeButtonClicked }) => {\r\n\r\n    const date = new Date(blog.createdAt)\r\n    const formattedDate = date.getFullYear() + '/' +\r\n        (date.getMonth() + 1) + '/' +\r\n        date.getDate() + ' - ' +\r\n        date.getHours() + ':' +\r\n        date.getMinutes()\r\n\r\n    const deleteButtonVisible = { display: blog.user.username === userFile.username ? '' : 'none' }\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <Card.Title>{blog.title}</Card.Title>\r\n                <ToggleButton className=\"content\">\r\n                    <Card.Text >{blog.content}</Card.Text>\r\n                    <Card.Text className=\"url\">{blog.url}</Card.Text>\r\n                    <Card.Text >{formattedDate}</Card.Text>\r\n                    <Card.Text className=\"likes\">Likes: {blog.likes}</Card.Text>\r\n                    <Button className=\"like-button\" variant=\"outline-primary\" name={`${blog.id}`} onClick={likeButtonClicked}>like</Button>\r\n                    <Button className=\"delete-button\" name={`${blog.id}`} onClick={deleteButtonClicked} style={deleteButtonVisible} variant=\"outline-primary\">delete</Button>\r\n                </ToggleButton>\r\n                <Card.Title className=\"author\">{blog.author}</Card.Title>\r\n\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BlogItem\r\n","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport BlogItem from './BlogItem'\r\nimport blogService from '../services/blogService'\r\nimport './Bloglist.css'\r\n\r\nconst Bloglist = ({ blogs, userFile, setBlogs }) => {\r\n\r\n    const sortedblogs = [...blogs].sort((a, b) => (a.likes < b.likes) ? 1 : -1)\r\n\r\n    const deleteButtonClicked = async (e) => {\r\n        const blogId = e.target.name\r\n        try {\r\n            const blog = blogs.find(blog => blog.id === blogId)\r\n            if (window.confirm(`Delete blog: ${blog.title} ?`)) {\r\n                await blogService.deleteOne(blog, userFile.token)\r\n                setBlogs(blogs.filter(blog => blog.id !== e.target.name))\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const likeButtonClicked = async (e) => {\r\n        const blogId = e.target.name\r\n        try {\r\n            const blog = blogs.find(blog => blog.id === blogId)\r\n            blog.likes = blog.likes + 1\r\n            await blogService.updateOne(blog)\r\n\r\n            setBlogs(blogs.filter(blog => blog.id !== e.target.name).concat(blog))\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"blog-list\">\r\n            {sortedblogs.map(blog => <BlogItem key={blog.id + '-root'} blog={blog} userFile={userFile} setBlogs={setBlogs} likeButtonClicked={likeButtonClicked} deleteButtonClicked={deleteButtonClicked} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bloglist\r\n","import React from 'react'\r\nimport './Notification.css'\r\n\r\n\r\nconst Notification = ({ text, color }) => {\r\n    return (\r\n        <h3 className=\"error\" style={{ color: color, borderColor: color }}> {text}</h3 >\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","\r\nexport const LOGGED_IN = 'LOGGED_IN'\r\nexport const NOT_LOGGED_IN = 'NOT_LOGGED_IN'\r\nexport const REGISTERING = 'REGISTERING'\r\n\r\n","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './LoginForm.css'\r\n\r\n\r\nconst LoginForm = ({ setUsername, setPassword, className, submitButtonClicked }) => {\r\n    return (\r\n        <Form className={className} onSubmit={submitButtonClicked}>\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Enter username\"\r\n                onChange={(event) => setUsername(event.target.value)} />\r\n\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Enter password\"\r\n                onChange={(event) => setPassword(event.target.value)} />\r\n            <br></br>\r\n            <Button id=\"login-button\" variant=\"outline-primary\"\r\n                type=\"submit\" name=\"login\">login</Button>\r\n\r\n            <Button id=\"register-button-on-login\" variant=\"outline-primary\"\r\n                type=\"submit\" name=\"register-screen\">register</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './CreateNewBlog.css'\r\n\r\nconst CreateNewBlog = ({ submitButtonClicked, setNewTitle, setNewAuthor, setNewURL, setNewContent }) => {\r\n    return (\r\n        <Form className=\"newBlog\" onSubmit={submitButtonClicked}>\r\n\r\n            <Form.Label>Title</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Title\"\r\n                onChange={(event) => setNewTitle(event.target.value)}\r\n            />\r\n\r\n            <Form.Label>Author</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Author\"\r\n                onChange={(event) => setNewAuthor(event.target.value)}\r\n            />\r\n\r\n            <Form.Label>Url</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"http://\" defaultValue=\"http://\"\r\n                onChange={(event) => setNewURL(event.target.value)}\r\n            />\r\n\r\n            <Form.Label>Content</Form.Label>\r\n            <Form.Control id=\"content\" as=\"textarea\" placeholder=\"Content\" row={5} maxLength={255}\r\n                onChange={(event) => setNewContent(event.target.value)} />\r\n\r\n            <br></br>\r\n            <Button id=\"save-button\" variant=\"outline-primary\"\r\n                type=\"submit\" name=\"save\">save</Button>\r\n\r\n            <Button id=\"clear-button\" variant=\"outline-primary\"\r\n                type=\"submit\" name=\"clear\">clear</Button>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CreateNewBlog\r\n","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './RegisterUserForm.css'\r\n\r\nconst RegisterUserForm = ({ submitButtonClicked, setUsername, setPassword, setFullName }) => {\r\n    return (\r\n        <Form className=\"registration-form\" onSubmit={submitButtonClicked}>\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Enter username\"\r\n                onChange={(event) => setUsername(event.target.value)} />\r\n\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Enter password\"\r\n                onChange={(event) => setPassword(event.target.value)} />\r\n\r\n            <Form.Label>Full Name</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Enter Full Name\"\r\n                onChange={(event) => setFullName(event.target.value)} />\r\n            <br></br>\r\n            <Button id=\"register-button\" variant=\"outline-primary\"\r\n                type=\"submit\" name=\"register\">register</Button>\r\n\r\n            <Button id=\"back-button\" variant=\"outline-primary\"\r\n                type=\"submit\" name=\"back\">back</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterUserForm\r\n","import axios from 'axios'\r\n\r\nconst base_Url = '/api/login'\r\n\r\nconst login = async (cred) => {\r\n    const res = await axios.post(base_Url, cred)\r\n    return res.data\r\n}\r\n\r\nconst loginService = { login }\r\n\r\nexport default loginService","import axios from 'axios'\r\n\r\nconst base_Url = '/api/users'\r\n\r\nconst registerUser = async (registration) => {\r\n    const res = await axios.post(base_Url, registration)\r\n    return res.data\r\n}\r\n\r\nconst registerUserService = { registerUser }\r\n\r\nexport default registerUserService","import React, { useState, useRef } from 'react'\r\nimport { LOGGED_IN, NOT_LOGGED_IN, REGISTERING } from '../utils/appStates'\r\nimport LoginForm from '../components/LoginForm'\r\nimport CreateNewBlog from '../components/CreateNewBlog'\r\nimport RegisterUserForm from '../components/RegisterUserForm'\r\nimport ToggleButton from '../components/ToggleButton'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport blogService from '../services/blogService'\r\nimport loginService from '../services/loginService'\r\nimport registerUserService from '../services/registerUserService'\r\n\r\n\r\nconst UserInterface = ({ appState, displayNotificationMessage, setUserFile, setAppState, userFile, setBlogs, blogs }) => {\r\n    // states for newBlog form\r\n    const [newTitle, setNewTitle] = useState('')\r\n    const [newAuthor, setNewAuthor] = useState('')\r\n    const [newURL, setNewURL] = useState('')\r\n    const [newContent, setNewContent] = useState('')\r\n\r\n    const blogFromRef = useRef()\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [fullname, setFullName] = useState('')\r\n\r\n    // master submit button clicked method\r\n    // gets called by form submit from button: login, save, logout, register-screen, register\r\n    const submitButtonClicked = async (e) => {\r\n        e.preventDefault()\r\n\r\n        // submitter is set to the function callers name (button name attribute)\r\n        const submitter = e.nativeEvent.submitter.name\r\n\r\n        const userInfo = {\r\n            username: username,\r\n            password: password\r\n        }\r\n\r\n        const newBlog = {\r\n            title: newTitle,\r\n            author: newAuthor,\r\n            url: newURL || 'no url',\r\n            content: newContent || 'no content'\r\n        }\r\n\r\n        const userForRegister = {\r\n            username: username,\r\n            password: password,\r\n            name: fullname\r\n        }\r\n        // execute different actions for different buttons\r\n        switch (submitter) {\r\n\r\n        // send post to /api/login to retrieve credential then store in local storage\r\n        // display wrong credential if username/password is wrong\r\n        case 'login':\r\n            if (!username || !password) {\r\n                return displayNotificationMessage('username and password cannot be empty', 'Red', 2000)\r\n            }\r\n\r\n            try {\r\n                const credential = await loginService.login(userInfo)\r\n                setUserFile(credential)\r\n                window.localStorage.setItem('token', JSON.stringify(credential))\r\n                displayNotificationMessage('Logged In', 'Green', 3000)\r\n                setAppState(LOGGED_IN)\r\n            } catch (err) {\r\n                displayNotificationMessage('Wrong credentials', 'Red', 3000)\r\n                return\r\n            }\r\n            break\r\n\r\n            // saving new Blog\r\n        case 'save':\r\n            if (newTitle === '' || newAuthor === '') {\r\n                return displayNotificationMessage('Title and Author cannot be Empty', 'Red', 3000)\r\n            }\r\n\r\n            try {\r\n                const blog = await blogService.createOne(newBlog, userFile.token)\r\n                setBlogs(blogs.concat(blog))\r\n                displayNotificationMessage('blog is saved succesfully', 'Green', 3000)\r\n                blogFromRef.current.toggle(false)\r\n\r\n            } catch (err) {\r\n                displayNotificationMessage(err.message, 'Red', 2000)\r\n                return\r\n            }\r\n            break\r\n\r\n            // set appstate to REGISTERING to display registration form\r\n        case 'register-screen':\r\n            setAppState(REGISTERING)\r\n            break\r\n\r\n            // post to /api/users to create new user, then switch appstate to NOT_LOGGED_IN to have user log in\r\n        case 'register':\r\n\r\n            try {\r\n                await registerUserService.registerUser(userForRegister)\r\n                displayNotificationMessage('Successfully Registered, Please Log in', 'Green', 3000)\r\n\r\n            } catch (err) {\r\n                displayNotificationMessage(JSON.stringify(err.response.data.error), 'Red', 5000)\r\n                return\r\n            }\r\n            setFullName('')\r\n            setAppState(NOT_LOGGED_IN)\r\n            break\r\n\r\n            // back button from registration form to get back to login form\r\n        case 'back':\r\n            setFullName('')\r\n            setAppState(NOT_LOGGED_IN)\r\n            break\r\n\r\n        default:\r\n\r\n        }\r\n        e.target.reset()\r\n        setUsername('')\r\n        setPassword('')\r\n    }\r\n\r\n    // display 1 of 3 forms: login, newblog, registration form\r\n    // based on 3 appStates: NOT_LOGGED_IN, LOGGED_IN, REGISTERING\r\n    const displayUserInterface = () => {\r\n        switch (appState) {\r\n        case NOT_LOGGED_IN:\r\n            return (<LoginForm className=\"login-form\"\r\n                submitButtonClicked={submitButtonClicked}\r\n                setUsername={setUsername}\r\n                setPassword={setPassword} />)\r\n        case LOGGED_IN:\r\n            return (<CreateNewBlog className=\"newBlog\"\r\n                submitButtonClicked={submitButtonClicked}\r\n                setNewTitle={setNewTitle}\r\n                setNewAuthor={setNewAuthor}\r\n                setNewURL={setNewURL}\r\n                setNewContent={setNewContent} />)\r\n        case REGISTERING:\r\n            return (<RegisterUserForm className=\"register-form\"\r\n                submitButtonClicked={submitButtonClicked}\r\n                setUsername={setUsername}\r\n                setPassword={setPassword}\r\n                setFullName={setFullName} />)\r\n        default:\r\n        }\r\n    }\r\n\r\n    const logoutClicked = () => {\r\n        // logout by deleting local storage credential\r\n        window.localStorage.removeItem('token')\r\n        if (window.confirm('Are you sure you would like to log out?')) {\r\n            setUserFile(null)\r\n            setAppState(NOT_LOGGED_IN)\r\n            blogFromRef.current.toggle(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button id=\"logout-button\" variant=\"outline-primary\" style={{ display: (appState === LOGGED_IN) ? '' : 'none' }}\r\n                onClick={logoutClicked} name=\"logout\">logout</Button>\r\n            <ToggleButton className=\"toggle-container\" appState={appState} ref={blogFromRef}>\r\n                {displayUserInterface()}\r\n            </ToggleButton>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserInterface\r\n","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport blogService from './services/blogService'\r\n\r\nimport BlogList from './components/Bloglist'\r\nimport Notification from './components/Notification'\r\n\r\n\r\nimport { LOGGED_IN, NOT_LOGGED_IN } from './utils/appStates'\r\n\r\nimport Tabs from 'react-bootstrap/Tabs'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport UserInterface from './components/UserInterface'\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n    // appState uses constants from appState.js to determine state of the app.\r\n    const [appState, setAppState] = useState(NOT_LOGGED_IN)\r\n\r\n    // state to track user login object - token, username, name\r\n    const [userFile, setUserFile] = useState(null)\r\n\r\n    // state to track current displayed notification message\r\n    // uses 3 properties -\r\n    //text: text to display\r\n    //color: color of notification\r\n    //duration: message duration in milliseconds\r\n    const [notificationMessage, setNotificationMessage] = useState({})\r\n\r\n    // state to track blogs to be fetched, set, updated, displayed\r\n    const [blogs, setBlogs] = useState([])\r\n\r\n    // 1. initial fetch to get login info from browser local storage\r\n    //      if success, set userFile and set appState to LOGGED_IN\r\n    // 2. initial fetch all blogs from backend\r\n    useEffect(() => {\r\n        const loggedUserJSON = window.localStorage.getItem('token')\r\n        if (loggedUserJSON) {\r\n            const user = JSON.parse(loggedUserJSON)\r\n            setUserFile(user)\r\n            setAppState(LOGGED_IN)\r\n        }\r\n\r\n        blogService.getAll().then(blogs => {\r\n            setBlogs(blogs)\r\n        })\r\n    }, [])\r\n\r\n    // function to display Notification Message\r\n    const displayNotificationMessage = (text, color, duration) => {\r\n        // check to see if any existing message exists.\r\n        // if so, clear it, then display new message\r\n        if (!isEmpty(notificationMessage)) {\r\n            setNotificationMessage({})\r\n            clearTimeout(notificationMessage.timeout)\r\n        }\r\n\r\n        const timeOutNumber = setTimeout(() => {\r\n            setNotificationMessage({})\r\n        }, duration)\r\n        setNotificationMessage({ text: text, color: color, timeout: timeOutNumber })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header id=\"app-header\">\r\n                <h1 id=\"app-title\">My Blog</h1>\r\n                <h5 id=\"log-status\">{userFile ? `Logged in as ${userFile.username}` : null}</h5>\r\n            </header>\r\n            <Tabs defaultActiveKey=\"home\" id=\"uncontrolled-tab-example\">\r\n                <Tab eventKey=\"home\" title=\"Home\">\r\n                    {/* display notificationMessage if not empty */}\r\n                    {isEmpty(notificationMessage)\r\n                        ? null\r\n                        : <Notification text={notificationMessage.text} color={notificationMessage.color} />}\r\n\r\n                    {/* UserInterface: LoginForm or RegistrationForm or NewBlogForm will display\r\n                            depending on appState */}\r\n                    <UserInterface\r\n                        appState={appState}\r\n                        displayNotificationMessage={displayNotificationMessage}\r\n                        setUserFile={setUserFile}\r\n                        setAppState={setAppState}\r\n                        userFile={userFile}\r\n                        setBlogs={setBlogs}\r\n                        blogs={blogs}\r\n                    />\r\n\r\n                    {/* only display blogs when LOGGED IN */}\r\n                    {appState === LOGGED_IN\r\n                        ? <BlogList blogs={blogs} userFile={userFile} setBlogs={setBlogs} />\r\n                        : null}\r\n\r\n                </Tab>\r\n                <Tab eventKey=\"profile\" title=\"Profile\">\r\n                </Tab>\r\n            </Tabs>\r\n        </div >\r\n    )\r\n}\r\n\r\n// helper method to check for empty object\r\nconst isEmpty = (object) => {\r\n    return JSON.stringify(object) === '{}'\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}